{"version":3,"file":"static/js/520.0816416b.chunk.js","mappings":"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","sources":["components/SearchBar/SearchBar.jsx","Pages/MoviesPage.jsx","components/Api/Api.jsx","components/MoviesList/MoviesList.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst SearchForm = styled.form`\n  display: flex;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  width: 400px;\n`;\n\nconst SearchButton = styled.button`\n  width: 70px;\n  height: 35px;\n  font-size: 14px;\n  cursor: pointer;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 14px;\n  outline: none;\n  margin-right: 5px;\n&::placeholder {\n  font: inherit;\n  font-size: 14px;\n}\n`;\n\n\nconst SearchBar = () => {\n  \n  const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState(() => searchParams.get('query') ?? '');\n\n  const onChange = e => {\n    const { value } = e.currentTarget;\n    setSearch(value.trim());\n  };\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n      \n    if (search.trim() === '') return;\n    setSearchParams({ query: search });\n    setSearch('');\n  };\n\n  return (\n    <>\n        <SearchForm onSubmit={onHandleSubmit}>\n          <SearchFormInput\n            value={search}\n            name=\"search\"\n            onChange={onChange}\n            type=\"text\"\n            autocomplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n            <SearchButton type=\"submit\">Search</SearchButton>\n        </SearchForm>\n    </>\n  );\n};\n\nexport default SearchBar;","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nimport { getMoviesByWord } from 'components/Api/Api';\n\nconst MoviesPage = () => {\n  \n    const [moviesList, setMoviesList] = useState([]);\n    const [searchParams] = useSearchParams();\n    const search = searchParams.get('query') ?? '';\n    const location = useLocation();\n\n    useEffect(() => {\n       if (!search) return;\n        getMoviesByWord(setMoviesList, search);\n    }, [search]);\n\n  return (\n      <>\n      <SearchBar />\n        {moviesList.length > 0 &&\n              <MoviesList moviesList={moviesList} location={location}/>\n        } \n    </>\n  );\n};\n\nexport default MoviesPage;","import axios from 'axios';\n\nexport const getList = async (setMoviesList) => {\n    const QUERY_LIST_MOVIES = 'https://api.themoviedb.org/3/movie/top_rated?api_key=de0dccb949912c01edc752d65802c189&language=en-US&page=1';\n    await axios\n      .get(QUERY_LIST_MOVIES)\n        .then(res => {\n         if (res.data.results.length === 0) return;\n         setMoviesList([...res.data.results]);\n        })\n        .catch(e => {\n        console(\"Not list !\");\n        return;\n      });\n}\n\nexport const getMovieDetails = async (setMovieDetails, moviesId) => {\n      const QUERY_MOVIES_DETAILS = `https://api.themoviedb.org/3/movie/${moviesId}?api_key=de0dccb949912c01edc752d65802c189&language=en-US`;\n          return await axios.get(QUERY_MOVIES_DETAILS).then(res => { \n              setMovieDetails(res.data);\n          }).catch(e => {\n          setMovieDetails({});\n        return\n      }); \n}\n\n\nexport const getReviewList = async (setReviewList, moviesId) => {\n    const QUERY_REVIEW = `https://api.themoviedb.org/3/movie/${moviesId}/reviews?api_key=de0dccb949912c01edc752d65802c189&language=en-US&page=1`;\n          return await axios.get(QUERY_REVIEW).then(res => { \n              setReviewList(res.data.results);\n          }).catch(e => {\n          setReviewList([]);\n        return\n      }); \n}\n\nexport const getCasts = async (setCastsList, moviesId) => {\n    const QUERY_CAST = `https://api.themoviedb.org/3/movie/${moviesId}/credits?api_key=de0dccb949912c01edc752d65802c189&language=en-US`;\n          return await axios.get(QUERY_CAST).then(res => { \n              setCastsList(res.data);\n          }).catch(e => {\n          setCastsList({});\n        return\n      }); \n}\n\nexport const getMoviesByWord = async (setMoviesList,search) => {\n    const QUERY_MOVIES_BY_WORD = `https://api.themoviedb.org/3/search/movie?api_key=de0dccb949912c01edc752d65802c189&query=${search}&page=1&language=en-US`;\n          return await axios.get(QUERY_MOVIES_BY_WORD).then(res => { \n            setMoviesList(res.data.results);\n          }).catch(e => {\n          setMoviesList([]);\n        return\n      }); \n}\n","import React from \"react\"\nimport styled from 'styled-components';\nimport { NavLink} from \"react-router-dom\";\n\n\nconst StyledLi = styled.li`\n    padding: 10px;\n    cursor: pointer;\n`;\n\nconst MoviesList = ({ moviesList, location}) => {\n    if (moviesList.length === 0) return;\n    return (\n    <>\n            <ul>\n                {moviesList.map(e => { return (\n                    <StyledLi key={e.id}>\n                        <NavLink to={`/movies/${e.id}`} state={{ from: location }}>{e.title}</NavLink>\n                    </StyledLi>\n                )})}\n          </ul>\n    </>\n    );\n}\n\nexport default MoviesList;"],"names":["SearchForm","styled","SearchButton","SearchFormInput","useSearchParams","searchParams","setSearchParams","useState","get","search","setSearch","onSubmit","e","preventDefault","trim","query","value","name","onChange","currentTarget","type","autocomplete","autoFocus","placeholder","moviesList","setMoviesList","location","useLocation","useEffect","getMoviesByWord","length","MoviesList","getList","axios","then","res","data","results","catch","console","getMovieDetails","setMovieDetails","moviesId","QUERY_MOVIES_DETAILS","getReviewList","setReviewList","QUERY_REVIEW","getCasts","setCastsList","QUERY_CAST","QUERY_MOVIES_BY_WORD","StyledLi","map","to","id","state","from","title"],"sourceRoot":""}