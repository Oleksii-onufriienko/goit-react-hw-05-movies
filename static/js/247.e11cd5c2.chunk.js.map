{"version":3,"file":"static/js/247.e11cd5c2.chunk.js","mappings":"wTAEaA,EAAO,mCAAG,WAAOC,GAAP,uEACO,8GADP,SAEbC,EAAAA,EAAAA,IADoB,+GAGrBC,MAAK,SAAAC,GAC2B,IAA5BA,EAAIC,KAAKC,QAAQC,QACrBN,GAAc,OAAIG,EAAIC,KAAKC,SAC3B,IACAE,OAAM,SAAAC,GACPC,QAAQ,aAET,IAXgB,2CAAH,sDAcPC,EAAe,mCAAG,WAAOC,EAAiBC,GAAxB,8EACnBC,EADmB,6CAC0CD,EAD1C,qEAERX,EAAAA,EAAAA,IAAUY,GAAsBX,MAAK,SAAAC,GAC9CQ,EAAgBR,EAAIC,KACvB,IAAEG,OAAM,SAAAC,GACTG,EAAgB,CAAC,EAEpB,IAPwB,mFAAH,wDAWfG,EAAa,mCAAG,WAAOC,EAAeH,GAAtB,8EACnBI,EADmB,6CACkCJ,EADlC,oFAENX,EAAAA,EAAAA,IAAUe,GAAcd,MAAK,SAAAC,GACtCY,EAAcZ,EAAIC,KAAKC,QAC1B,IAAEE,OAAM,SAAAC,GACTO,EAAc,GAEjB,IAPsB,mFAAH,wDAUbE,EAAQ,mCAAG,WAAOC,EAAcN,GAArB,8EACdO,EADc,6CACqCP,EADrC,6EAEDX,EAAAA,EAAAA,IAAUkB,GAAYjB,MAAK,SAAAC,GACpCe,EAAaf,EAAIC,KACpB,IAAEG,OAAM,SAAAC,GACTU,EAAa,CAAC,EAEjB,IAPiB,mFAAH,wDAURE,EAAe,mCAAG,WAAOpB,EAAcqB,GAArB,8EACrBC,EADqB,mGAC8FD,EAD9F,mCAERpB,EAAAA,EAAAA,IAAUqB,GAAsBpB,MAAK,SAAAC,GAChDH,EAAcG,EAAIC,KAAKC,QACxB,IAAEE,OAAM,SAAAC,GACTR,EAAc,GAEjB,IAPwB,mFAAH,uD,sMC1CfuB,EAAWC,EAAAA,GAAAA,GAAH,oDAIRC,EAAYD,EAAAA,GAAAA,IAAH,kEAKTE,EAAOF,EAAAA,GAAAA,EAAH,sEAuCjB,UAlCA,WACI,IAAQZ,GAAae,EAAAA,EAAAA,MAAbf,SACR,GAAkCgB,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBX,EAAlB,KAMA,IAJAY,EAAAA,EAAAA,YAAU,YACNb,EAAAA,EAAAA,IAASC,EAAaN,EACzB,GAAE,CAACA,IAECiB,EAAUE,eAAe,QAA9B,CAEA,IAAQC,EAASH,EAATG,KACR,OACC,gCACwB,IAArBH,EAAUvB,QACT,qCAEA0B,EAAKC,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACxC,OACG,UAACb,EAAD,YACC,SAACE,EAAD,CACGY,QAAQ,OACRC,IAAG,yCAAoCJ,GACvCK,IAAI,UAJR,KAME,SAACb,EAAD,UAAOS,KACR,UAACT,EAAD,yBAAkBU,OAPJD,EAUnB,IACC,MArBuC,CAwBhD,C","sources":["components/Api/Api.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const getList = async (setMoviesList) => {\n    const QUERY_LIST_MOVIES = 'https://api.themoviedb.org/3/movie/top_rated?api_key=de0dccb949912c01edc752d65802c189&language=en-US&page=1';\n    await axios\n      .get(QUERY_LIST_MOVIES)\n        .then(res => {\n         if (res.data.results.length === 0) return;\n         setMoviesList([...res.data.results]);\n        })\n        .catch(e => {\n        console(\"Not list !\");\n        return;\n      });\n}\n\nexport const getMovieDetails = async (setMovieDetails, moviesId) => {\n      const QUERY_MOVIES_DETAILS = `https://api.themoviedb.org/3/movie/${moviesId}?api_key=de0dccb949912c01edc752d65802c189&language=en-US`;\n          return await axios.get(QUERY_MOVIES_DETAILS).then(res => { \n              setMovieDetails(res.data);\n          }).catch(e => {\n          setMovieDetails({});\n        return\n      }); \n}\n\n\nexport const getReviewList = async (setReviewList, moviesId) => {\n    const QUERY_REVIEW = `https://api.themoviedb.org/3/movie/${moviesId}/reviews?api_key=de0dccb949912c01edc752d65802c189&language=en-US&page=1`;\n          return await axios.get(QUERY_REVIEW).then(res => { \n              setReviewList(res.data.results);\n          }).catch(e => {\n          setReviewList([]);\n        return\n      }); \n}\n\nexport const getCasts = async (setCastsList, moviesId) => {\n    const QUERY_CAST = `https://api.themoviedb.org/3/movie/${moviesId}/credits?api_key=de0dccb949912c01edc752d65802c189&language=en-US`;\n          return await axios.get(QUERY_CAST).then(res => { \n              setCastsList(res.data);\n          }).catch(e => {\n          setCastsList({});\n        return\n      }); \n}\n\nexport const getMoviesByWord = async (setMoviesList,search) => {\n    const QUERY_MOVIES_BY_WORD = `https://api.themoviedb.org/3/search/movie?api_key=de0dccb949912c01edc752d65802c189&query=${search}&page=1&language=en-US`;\n          return await axios.get(QUERY_MOVIES_BY_WORD).then(res => { \n            setMoviesList(res.data.results);\n          }).catch(e => {\n          setMoviesList([]);\n        return\n      }); \n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCasts } from 'components/Api/Api';\nimport styled from 'styled-components';\n\nexport const StyledLi = styled.li`\n    list-style-type: none;\n`;\n\nexport const StyledImg = styled.img`\n    width: 120px;\n    margin-left:50px;\n`;\n\nexport const Text = styled.p`\n    margin-left: 30px;\n    font-size: 14px;\n`;\n\nfunction Cast() {\n    const { moviesId } = useParams();\n    const [castsList, setCastsList] = useState({});\n\n    useEffect(() => {\n        getCasts(setCastsList,moviesId);\n    }, [moviesId]);\n\n    if (!castsList.hasOwnProperty('cast')) return;\n  \n    const { cast } = castsList;\n    return (\n     <>\n       {castsList.length === 0 ? (\n         <h3>No casts</h3>\n       ) : (\n         cast.map(({ profile_path, original_name, character }) => {\n          return (\n             <StyledLi key={original_name}>\n              <StyledImg\n                 loading=\"lazy\"\n                 src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                 alt=\"actor\"\n               />\n              ,<Text>{original_name}</Text>\n              <Text>Character: {character}</Text>\n            </StyledLi>\n          );\n        })\n       )}{' '}\n    </>\n    );\n}\n      \nexport default Cast;"],"names":["getList","setMoviesList","axios","then","res","data","results","length","catch","e","console","getMovieDetails","setMovieDetails","moviesId","QUERY_MOVIES_DETAILS","getReviewList","setReviewList","QUERY_REVIEW","getCasts","setCastsList","QUERY_CAST","getMoviesByWord","search","QUERY_MOVIES_BY_WORD","StyledLi","styled","StyledImg","Text","useParams","useState","castsList","useEffect","hasOwnProperty","cast","map","profile_path","original_name","character","loading","src","alt"],"sourceRoot":""}